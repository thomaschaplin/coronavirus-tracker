{"version":3,"sources":["CountryPicker.js","CoronavirusData.js","App.js","serviceWorker.js","index.js"],"names":["CountryPicker","props","countriesOptions","selectedCountry","onChangeCountry","TextField","label","variant","className","select","value","onChange","helperText","map","option","MenuItem","key","CoronavirusData","confirmed","recovered","deaths","BASE_URL","App","useState","setCountriesOptions","firstCountry","setFirstCountry","countryConfirmed","setCountryConfirmed","countryRecovered","setCountryRecovered","countryDeaths","setCountryDeaths","useEffect","fetch","then","res","json","data","Object","keys","countries","sort","Fragment","e","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4QAIe,SAASA,EAAcC,GAAQ,IAEtCC,EAGAD,EAHAC,iBACAC,EAEAF,EAFAE,gBACAC,EACAH,EADAG,gBAGJ,OACI,6BACI,kBAACC,EAAA,EAAD,CACIC,MAAM,UACNC,QAAQ,WACRC,UAAU,SACVC,QAAM,EACNC,MAAK,UAAKP,GACVQ,SAAUP,EACVQ,WAAW,uBAEVV,EAAiBW,KAAI,SAAAC,GAAM,OACxB,kBAACC,EAAA,EAAD,CAAUC,IAAKF,EAAQJ,MAAOI,GACzBA,QCtBV,SAASG,EAAgBhB,GAAQ,IAExCiB,EAGAjB,EAHAiB,UACAC,EAEAlB,EAFAkB,UACAC,EACAnB,EADAmB,OAGJ,OACI,6BACI,6BACA,iDAAmBF,IACnB,iDAAmBC,IACnB,8CAAgBC,KCR5B,IAAMC,EAAW,iCA+CFC,MA7Cf,WAAgB,IAAD,EACmCC,mBAAS,IAD5C,mBACNrB,EADM,KACYsB,EADZ,OAE2BD,qBAF3B,mBAENE,EAFM,KAEQC,EAFR,OAGmCH,qBAHnC,mBAGNI,EAHM,KAGYC,EAHZ,OAImCL,qBAJnC,mBAINM,EAJM,KAIYC,EAJZ,OAK6BP,qBAL7B,mBAKNQ,EALM,KAKSC,EALT,KA4Bb,OArBAC,qBAAU,WACRC,MAAM,GAAD,OAAIb,EAAJ,eACFc,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJd,EAAoB,YAAIe,OAAOC,KAAKF,EAAKG,WAAWC,SACpDhB,EAAgB,YAAIa,OAAOC,KAAKF,EAAKG,WAAWC,QAAQ,WAE3D,IAEHT,qBAAU,WACY,MAAhBR,GACFS,MAAM,GAAD,OAAIb,EAAJ,sBAA0BI,IAC5BU,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJV,EAAoBU,EAAKpB,UAAUR,OACnCoB,EAAoBQ,EAAKnB,UAAUT,OACnCsB,EAAiBM,EAAKlB,OAAOV,YAGlC,CAACe,IAGF,kBAAC,IAAMkB,SAAP,KACE,mDACA,kBAAC3C,EAAD,CACEE,iBAAkBA,EAClBC,gBAAiBsB,EACjBrB,gBAAiB,SAAAwC,GAAC,OAAIlB,EAAgBkB,EAAEC,OAAOnC,UAEjD,kBAACO,EAAD,CACEC,UAAWS,EACXR,UAAWU,EACXT,OAAQW,MCnCIe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.6a548c3f.chunk.js","sourcesContent":["import React from 'react'\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nexport default function CountryPicker(props) {\n    const {\n        countriesOptions,\n        selectedCountry,\n        onChangeCountry,\n    } = props\n\n    return (\n        <div>\n            <TextField\n                label=\"Country\"\n                variant=\"outlined\"\n                className=\"select\"\n                select\n                value={`${selectedCountry}`}\n                onChange={onChangeCountry}\n                helperText=\"Select your country\"\n            >\n                {countriesOptions.map(option => (\n                    <MenuItem key={option} value={option}>\n                        {option}\n                    </MenuItem>\n                ))}\n            </TextField>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function CoronavirusData(props) {\n    const {\n        confirmed,\n        recovered,\n        deaths,\n    } = props\n\n    return (\n        <div>\n            <br/>\n            <h2>{`Confirmed: ${confirmed}`}</h2>\n            <h2>{`Recovered: ${recovered}`}</h2>\n            <h2>{`Deaths: ${deaths}`}</h2>\n        </div>\n    )\n}\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport CountryPicker from './CountryPicker'\nimport CoronavirusData from './CoronavirusData'\n\n\nconst BASE_URL = 'https://covid19.mathdro.id/api'\n\nfunction App() {\n  const [countriesOptions, setCountriesOptions] = useState([])\n  const [firstCountry, setFirstCountry] = useState()\n  const [countryConfirmed, setCountryConfirmed] = useState()\n  const [countryRecovered, setCountryRecovered] = useState()\n  const [countryDeaths, setCountryDeaths] = useState()\n\n  useEffect(() => {\n    fetch(`${BASE_URL}/countries`)\n      .then(res => res.json())\n      .then(data => {\n        setCountriesOptions([...Object.keys(data.countries).sort()])\n        setFirstCountry([...Object.keys(data.countries).sort()][241])\n      })\n  }, [])\n\n  useEffect(() => {\n    if (firstCountry != null) {\n      fetch(`${BASE_URL}/countries/${firstCountry}`)\n        .then(res => res.json())\n        .then(data => {\n          setCountryConfirmed(data.confirmed.value)\n          setCountryRecovered(data.recovered.value)\n          setCountryDeaths(data.deaths.value)\n        })\n    }\n  }, [firstCountry])\n\n  return (\n    <React.Fragment>\n      <h1>Coronavirus Tracker</h1>\n      <CountryPicker\n        countriesOptions={countriesOptions}\n        selectedCountry={firstCountry}\n        onChangeCountry={e => setFirstCountry(e.target.value)}\n      />\n      <CoronavirusData\n        confirmed={countryConfirmed}\n        recovered={countryRecovered}\n        deaths={countryDeaths}\n      />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}